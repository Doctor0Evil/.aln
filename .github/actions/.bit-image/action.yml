name: .bit-image
description: Build, test, and optionally push all Dockerfiles with an audit manifest.
author: bit.hub

inputs:
  registry:
    description: Container registry hostname (e.g., ghcr.io, docker.io)
    required: false
    default: ghcr.io
  registry-username:
    description: Registry username/owner (for ghcr, usually the GitHub org/user)
    required: true
  registry-password:
    description: Registry password or token (pass GITHUB_TOKEN for ghcr)
    required: true
  image-prefix:
    description: Prefix for image names (e.g., my-image, service, aln)
    required: false
    default: my-image
  push:
    description: 'Whether to push images to the registry (true|false)'
    required: false
    default: 'false'
  test-command:
    description: Command to run in a container to validate the image
    required: false
    default: /bin/sh -lc 'echo "container is healthy"'
  tag-format:
    description: date(1) format used in tags
    required: false
    default: +%Y%m%d%H%M%S

outputs:
  audit-file:
    description: Path to the generated audit manifest
    value: ${{ steps.buildpush.outputs.audit_file }}

runs:
  using: composite
  steps:
    - name: Verify Docker is available
      shell: bash
      run: |
        if ! command -v docker >/dev/null 2>&1; then
          echo "Docker CLI not found"; exit 1
        fi

    - name: Login to registry (if pushing)
      if: ${{ inputs.push == 'true' }}
      shell: bash
      run: |
        echo "${{ inputs.registry-password }}" | docker login "${{ inputs.registry }}" \
          -u "${{ inputs.registry-username }}" --password-stdin

    - name: Build, test, and optionally push
      id: buildpush
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p audit
        TS=$(date "${{ inputs.tag-format }}")
        AUDIT_FILE="audit/build_manifest_${TS}.log"

        {
          echo "Build Manifest - $(date)"
          echo "Repository: ${GITHUB_REPOSITORY:-unknown}"
          echo "Commit: ${GITHUB_SHA:-unknown}"
          echo "Registry: ${{ inputs.registry }}"
          echo "Image Prefix: ${{ inputs.image-prefix }}"
          echo "Push Enabled: ${{ inputs.push }}"
          echo "----------------------------------------"
        } > "$AUDIT_FILE"

        mapfile -t DOCKERFILES < <(find . -type f -iname "Dockerfile" | sort)
        if [ ${#DOCKERFILES[@]} -eq 0 ]; then
          echo "No Dockerfiles found."; exit 1
        fi

        echo "Found ${#DOCKERFILES[@]} Dockerfile(s)."
        for FILE in "${DOCKERFILES[@]}"; do
          CONTEXT_DIR=$(dirname "$FILE")
          SAFE_TAG=$(echo "$CONTEXT_DIR" | sed 's|^\./||; s|/|-|g')
          [ -z "$SAFE_TAG" ] && SAFE_TAG="root"

          IMAGE="${{ inputs.registry }}/${{ inputs.registry-username }}/${{ inputs.image-prefix }}-${SAFE_TAG}:${TS}"

          echo "----"
          echo "Building: $FILE"
          echo "Context:  $CONTEXT_DIR"
          echo "Image:    $IMAGE"

          docker build "$CONTEXT_DIR" --file "$FILE" --tag "$IMAGE"

          echo "Testing image: $IMAGE"
          docker run --rm "$IMAGE" ${{ inputs.test-command }}

          if [ "${{ inputs.push }}" = "true" ]; then
            echo "Pushing: $IMAGE"
            docker push "$IMAGE"
          else
            echo "Skipping push for: $IMAGE"
          fi

          IMAGE_ID=$(docker images --no-trunc --quiet "$IMAGE" | head -n1 || true)
          IMAGE_SIZE=$(docker images "$IMAGE" --format "{{.Size}}" | head -n1 || true)

          {
            echo "Image: $IMAGE"
            echo "  Dockerfile: $FILE"
            echo "  Context: $CONTEXT_DIR"
            echo "  Image ID: ${IMAGE_ID:-unknown}"
            echo "  Size: ${IMAGE_SIZE:-unknown}"
            echo "  Tested with: ${{ inputs.test-command }}"
            echo "  Pushed: ${{ inputs.push }}"
            echo "  Built: $(date)"
            echo "----------------------------------------"
          } >> "$AUDIT_FILE"
        done

        echo "audit_file=$AUDIT_FILE" >> "$GITHUB_OUTPUT"
