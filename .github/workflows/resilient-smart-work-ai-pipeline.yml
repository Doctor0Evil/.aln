name: Resilient Smart Work AI Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  smart-work-ai:
    runs-on: ubuntu-latest
    env:
      SMART_AI_MODE: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Main Pipeline Task
        id: main-task
        run: |
          echo "Executing primary AI workflow..."
          if [ -f ./your-ai-script.sh ]; then
            chmod +x ./your-ai-script.sh
            ./your-ai-script.sh
          else
            echo "::warning::Script ./your-ai-script.sh not found. Skipping execution."
            exit 127
          fi
        continue-on-error: true

      - name: Smart Retry if Main Fails
        id: retry-task
        if: steps.main-task.outcome == 'failure'
        run: |
          echo "Main step failed. Retrying using smart.work.ai strategy..."
          if [ -f ./your-ai-script.sh ]; then
            chmod +x ./your-ai-script.sh
            ./your-ai-script.sh
          else
            echo "::warning::Script ./your-ai-script.sh still not found. Skipping execution."
            exit 127
          fi
        continue-on-error: true

      - name: Branch to Failing Workflows (if retry fails)
        id: branch-to-fail
        if: steps.main-task.outcome == 'failure' && steps.retry-task.outcome == 'failure'
        run: |
          echo "Both main and retry failed. Branching to handle failing workflows..."

      - name: Store Smart Params & Diagnostics
        run: |
          echo "::group::Saving parameters and AI diagnostics"
          echo "SMART_AI_MODE=${SMART_AI_MODE}" >> $GITHUB_ENV
          echo "MAIN_OUTCOME=${{ steps.main-task.outcome }}" >> $GITHUB_ENV
          echo "RETRY_OUTCOME=${{ steps.retry-task.outcome }}" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Self-Healing Fallback/Notify Human
        if: steps.branch-to-fail.outcome == 'failure'
        run: |
          echo "::warning::ALERT! All smart attempts failed. Please manually inspect job run or auto-recover."
        continue-on-error: true

      - name: ðŸ§€ Call HumorBot or Puns Action
        uses: AlexLakatos/puns-dev-action@v1.3
        id: humor

      - name: ðŸ¦¾ Add Chuck Norris fact to audit trail
        uses: github-actions-up-and-running/pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          comment_type: 'chuck'  # post a Chuck Norris fact

      - name: ðŸ§ª Compliance+Profanity Fusion Check
        run: |
          JOKE="${{ steps.humor.outputs.pun }} ${{ steps.humor.outputs.punchline }}"
          if [[ "$JOKE" == *"compliance"* || "$JOKE" == *"fuck"* || "$JOKE" == *"shit"* || "$JOKE" == *"damn"* ]]; then
            echo "âœ… Humor and compliance (with spicy banter) are in balance. Proceed with entertainment!"
          else
            echo "::error:: Jokes must meet compliance and entertainment requirements! Try injecting more banter or relevant humor."
            exit 1
          fi
