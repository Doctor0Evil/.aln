name: 🚀 ALN Programming Language - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment Environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Prevent overlapping runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  ALN_VERSION: '12.0.0'
  DOCKER_BUILDKIT: 1

jobs:
  # Job 1: Validation
  validate:
    name: 🔍 Validate & Setup
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🏷️ Extract version
        id: version
        run: |
          VERSION=$(grep -oP 'version.*"\K[^"]+' README.md | head -1 || echo "12.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 🔍 Check deployment requirement
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: 📋 File structure validation
        run: |
          [[ -f "README.md" ]] || (echo "❌ Missing README.md" && exit 1)
          echo "✅ Structure OK"

  # Job 2: Matrix .NET build/test
  build-dotnet:
    name: 🏗️ Build & Test (.NET ${{ matrix.dotnet }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet: ['6.0.x', '8.0.x']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: 📦 Restore
        run: |
          PROJECT=$(find src/Core -maxdepth 2 -name "*.csproj" -o -name "*.sln" | head -n 1 || true)
          if [[ -n "$PROJECT" ]]; then dotnet restore "$PROJECT"; else echo "ℹ️ No .NET project found"; fi

      - name: 🏗️ Build
        run: |
          PROJECT=$(find src/Core -maxdepth 2 -name "*.csproj" -o -name "*.sln" | head -n 1 || true)
          if [[ -n "$PROJECT" ]]; then dotnet build "$PROJECT" -c Release --no-restore; else echo "ℹ️ Skipping build"; fi

      - name: 🧪 Test
        run: |
          if find tests -name "*.csproj" | grep -q .; then
            dotnet test tests -c Release --no-build --logger trx
          else
            echo "ℹ️ No .NET test projects found"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: dotnet-${{ matrix.os }}-${{ matrix.dotnet }}
          path: |
            src/Core/bin/Release/
            artifacts/
          if-no-files-found: warn
          retention-days: 7

  # Job 3: PowerShell validation (consolidated robust one)
  validate-powershell:
    name: 🔧 PowerShell Validation
    runs-on: windows-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - name: 🔍 Validate PowerShell Scripts/Modules
        shell: pwsh
        run: |
          $files = Get-ChildItem -Recurse -Include *.ps1,*.psm1 -File
          if ($files.Count -eq 0) {
            Write-Host "ℹ️ No PowerShell scripts or modules found."
            exit 0
          }
          $failures = 0
          foreach ($file in $files) {
            Write-Host "🔎 Checking: $($file.FullName)"
            try {
              $null = Get-Content $file.FullName -ErrorAction Stop
              Write-Host "✅ $($file.Name) validated"
            } catch {
              Write-Host "❌ $($file.Name) failed: $($_.Exception.Message)"
              $failures++
            }
          }
          if ($failures -gt 0) {
            Write-Host "❌ Some PowerShell files failed validation."
            exit 1
          } else {
            Write-Host "✅ All PowerShell files passed validation."
          }

  # Job 4: Docker
  build-docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [validate, build-dotnet]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - run: |
          IMAGE="aln-core:${{ needs.validate.outputs.version }}"
          docker build -t $IMAGE .
          docker run --rm $IMAGE

  # Job 5: Security
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      - run: echo "✅ Security check placeholder"

  # Job 6: Deploy (single consolidated deployment after all succeed)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [validate, build-dotnet, validate-powershell, build-docker, security-scan]
    if: |
      always() &&
      needs.validate.outputs.should-deploy == 'true' &&
      needs.build-dotnet.result == 'success' &&
      needs.build-docker.result == 'success'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - run: |
          echo "🚀 Deploying ALN v${{ needs.validate.outputs.version }} to ${{ github.event.inputs.deploy_env || 'staging' }}"

  # Job 7: Notify
  notify:
    name: 📢 Summary Report
    runs-on: ubuntu-latest
    needs: [validate, build-dotnet, validate-powershell, build-docker, security-scan, deploy]
    if: always()
    steps:
      - run: |
          echo "📊 Results:"
          echo "Validate: ${{ needs.validate.result }}"
          echo ".NET Matrix: ${{ needs.build-dotnet.result }}"
          echo "PowerShell: ${{ needs.validate-powershell.result }}"
          echo "Docker: ${{ needs.build-docker.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
