name: Run PowerShell scripts cross‑platform

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  run-powershell:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PowerShell (non‑Windows only)
        if: runner.os != 'Windows'
        uses: PSModule/install-powershell@v1
        with:
          Version: 'latest'

      - name: Show PowerShell version
        shell: pwsh
        run: |
          Write-Host "PowerShell version in this runner:"
          $PSVersionTable

      - name: List scripts directory
        shell: pwsh
        run: |
          Write-Host "Current dir: $PWD"
          Write-Host "Contents of scripts/:"
          if (Test-Path scripts) {
            Get-ChildItem -Force scripts
          } else {
            Write-Warning "No scripts/ directory found"
          }

      - name: Run all PowerShell scripts in scripts/
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $scriptDir = Join-Path $PWD 'scripts'
          if (-not (Test-Path $scriptDir)) {
            throw "Directory not found: $scriptDir"
          }

          $scripts = Get-ChildItem -Path $scriptDir -Filter '*.ps1' -File
          if (-not $scripts) {
            Write-Warning "No PowerShell scripts found in $scriptDir"
            exit 0
          }

          $failures = @()

          foreach ($script in $scripts) {
            Write-Host "=== Running $($script.Name) ==="
            & $script.FullName
            $exitCode = $LASTEXITCODE
            if ($exitCode -ne 0) {
              Write-Warning "Script failed: $($script.Name) with exit code $exitCode"
              $failures += "$($script.Name): exit code $exitCode"
            }
          }

          if ($failures.Count -gt 0) {
            throw "One or more scripts failed:`n$($failures -join "`n")"
          }
