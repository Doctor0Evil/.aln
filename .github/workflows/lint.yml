name: üßπ Lint & Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Prevent multiple runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-yaml:
    name: üìù YAML Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üßπ Lint YAML files
      uses: ibiqlik/action-yamllint@v3
      with:
        config_file: .yamllint.yml
        strict: false
      continue-on-error: true

    - name: üîç Manual YAML validation
      run: |
        echo "üîç Validating YAML files manually..."
        
        # Find all YAML files
        find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | while read -r file; do
          echo "Checking: $file"
          
          # Basic YAML syntax check using Python
          python3 -c "
        import yaml
        import sys
        try:
            with open('$file', 'r') as f:
                yaml.safe_load(f)
            print('‚úÖ $file - Valid YAML')
        except yaml.YAMLError as e:
            print('‚ùå $file - Invalid YAML:', str(e))
            sys.exit(1)
        except Exception as e:
            print('‚ö†Ô∏è $file - Error:', str(e))
        " || {
            echo "‚ùå YAML validation failed for $file"
            echo "This might cause workflow failures"
          }
        done
        
        echo "‚úÖ YAML validation completed"

  lint-powershell:
    name: üîß PowerShell Linting
    runs-on: windows-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üßπ Lint PowerShell files
      shell: pwsh
      run: |
        Write-Host "üßπ Linting PowerShell files..."
        
        # Install PSScriptAnalyzer if not available
        if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
          Write-Host "üì¶ Installing PSScriptAnalyzer..."
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
        }
        
        # Find all PowerShell files
        $psFiles = Get-ChildItem -Recurse -Include "*.ps1", "*.psm1" -Exclude "*.Tests.ps1"
        
        if ($psFiles.Count -eq 0) {
          Write-Host "‚ÑπÔ∏è No PowerShell files found to lint"
          exit 0
        }
        
        $allIssues = @()
        
        foreach ($file in $psFiles) {
          Write-Host "Checking: $($file.FullName)"
          
          $issues = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Warning, Error
          
          if ($issues.Count -eq 0) {
            Write-Host "‚úÖ $($file.Name) - No issues found"
          } else {
            Write-Host "‚ö†Ô∏è $($file.Name) - Found $($issues.Count) issues:"
            foreach ($issue in $issues) {
              Write-Host "  Line $($issue.Line): $($issue.Message)"
            }
            $allIssues += $issues
          }
        }
        
        if ($allIssues.Count -gt 0) {
          Write-Host "‚ö†Ô∏è Found $($allIssues.Count) total PowerShell linting issues"
          Write-Host "These are warnings and won't fail the build"
        } else {
          Write-Host "‚úÖ All PowerShell files passed linting"
        }

  lint-markdown:
    name: üìö Markdown Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üßπ Lint Markdown files
      uses: DavidAnson/markdownlint-cli2-action@v16
      with:
        globs: |
          **/*.md
          !node_modules/**
        config: |
          {
            "default": true,
            "MD013": false,
            "MD033": false,
            "MD041": false
          }
      continue-on-error: true

  validate-json:
    name: üìã JSON Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîç Validate JSON files
      run: |
        echo "üîç Validating JSON files..."
        
        find . -type f -name "*.json" -not -path "./.git/*" -not -path "./node_modules/*" | while read -r file; do
          echo "Checking: $file"
          
          if python3 -m json.tool "$file" > /dev/null 2>&1; then
            echo "‚úÖ $file - Valid JSON"
          else
            echo "‚ùå $file - Invalid JSON"
            python3 -m json.tool "$file" 2>&1 | head -5
          fi
        done
        
        echo "‚úÖ JSON validation completed"

  check-links:
    name: üîó Link Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîó Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'no'
        config-file: '.github/mlc_config.json'
      continue-on-error: true

    - name: üîó Manual link check for critical files
      run: |
        echo "üîó Checking critical links in README.md..."
        
        if [[ -f "README.md" ]]; then
          # Extract URLs from README and check basic ones
          URLS=$(grep -oP 'https?://[^\s\)]+' README.md | head -10)
          
          if [[ -n "$URLS" ]]; then
            echo "Found URLs to check:"
            echo "$URLS"
            
            # Check a few key URLs (don't fail the build)
            while IFS= read -r url; do
              if curl -s --head --max-time 10 "$url" > /dev/null 2>&1; then
                echo "‚úÖ $url - Accessible"
              else
                echo "‚ö†Ô∏è $url - May be inaccessible"
              fi
            done <<< "$URLS"
          else
            echo "‚ÑπÔ∏è No URLs found in README.md"
          fi
        else
          echo "‚ÑπÔ∏è README.md not found"
        fi

  security-lint:
    name: üîí Security Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîç Scan for secrets
      run: |
        echo "üîç Scanning for potential secrets..."
        
        # Common secret patterns
        PATTERNS=(
          "password\s*[=:]\s*['\"][^'\"]{8,}"
          "api[_-]?key\s*[=:]\s*['\"][^'\"]{20,}"
          "secret\s*[=:]\s*['\"][^'\"]{16,}"
          "token\s*[=:]\s*['\"][^'\"]{16,}"
          "private[_-]?key\s*[=:]\s*['\"][^'\"]{32,}"
        )
        
        FOUND_ISSUES=false
        
        for pattern in "${PATTERNS[@]}"; do
          if grep -rE -i "$pattern" . --exclude-dir=.git --exclude="*.md" --exclude-dir=node_modules 2>/dev/null | grep -v "example\|placeholder\|template\|test" | head -5; then
            FOUND_ISSUES=true
          fi
        done
        
        if [[ "$FOUND_ISSUES" == "true" ]]; then
          echo "‚ö†Ô∏è Potential secrets detected - please review"
          echo "Note: This may include false positives"
        else
          echo "‚úÖ No obvious secrets detected"
        fi

  code-quality-summary:
    name: üìä Code Quality Summary
    runs-on: ubuntu-latest
    needs: [lint-yaml, lint-powershell, lint-markdown, validate-json, check-links, security-lint]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: üìä Generate summary
      run: |
        echo "üìä Code Quality Summary:" 
        echo "YAML Linting: ${{ needs.lint-yaml.result }}"
        echo "PowerShell Linting: ${{ needs.lint-powershell.result }}"
        echo "Markdown Linting: ${{ needs.lint-markdown.result }}"
        echo "JSON Validation: ${{ needs.validate-json.result }}"
        echo "Link Checking: ${{ needs.check-links.result }}"
        echo "Security Linting: ${{ needs.security-lint.result }}"
        
        # Count successful jobs
        SUCCESS_COUNT=0
        TOTAL_COUNT=6
        
        if [[ "${{ needs.lint-yaml.result }}" == "success" ]]; then
          ((SUCCESS_COUNT++))
        fi
        if [[ "${{ needs.lint-powershell.result }}" == "success" ]]; then
          ((SUCCESS_COUNT++))
        fi
        if [[ "${{ needs.lint-markdown.result }}" == "success" ]]; then
          ((SUCCESS_COUNT++))
        fi
        if [[ "${{ needs.validate-json.result }}" == "success" ]]; then
          ((SUCCESS_COUNT++))
        fi
        if [[ "${{ needs.check-links.result }}" == "success" ]]; then
          ((SUCCESS_COUNT++))
        fi
        if [[ "${{ needs.security-lint.result }}" == "success" ]]; then
          ((SUCCESS_COUNT++))
        fi
        
        PERCENTAGE=$((SUCCESS_COUNT * 100 / TOTAL_COUNT))
        
        echo "‚úÖ Code quality score: $SUCCESS_COUNT/$TOTAL_COUNT ($PERCENTAGE%)"
        
        if [[ $SUCCESS_COUNT -eq $TOTAL_COUNT ]]; then
          echo "üéâ All code quality checks passed!"
        else
          echo "‚ö†Ô∏è Some code quality checks had issues - review the logs above"
        fi
