param(
  [string]$Action,
  [string]$User,
  [string]$HostUrl = "http://localhost:7777",
  [string]$TelemetryEndpoint = "",   # e.g., https://your.telemetry/ingest
  [string]$TelemetryKey = "",        # bearer token or instrumentation key
  [string]$IntegrityKey = ""         # optional HMAC key for integrity.json verification
)

# ------------------------------------------------------------
# CONFIG
# ------------------------------------------------------------
$RepoRoot          = (Get-Location).Path
$SwarmnetExe       = Join-Path $RepoRoot "swarmnet.exe"
$ConfigsDir        = Join-Path $RepoRoot "configs"
$LogsDir           = Join-Path $RepoRoot "logs"
$HostAuditDir      = Join-Path $LogsDir "host"
$AgentsAuditDir    = Join-Path $LogsDir "agents"
$TasksDir          = Join-Path $RepoRoot ".vscode"
$WorkspacePrefix   = "wd13-"
$SeedEnvName       = "SWARMNET_SEED"
$DefaultSeed       = (Get-Date).ToString("yyyyMMdd-HHmmss") + "-WOD"
$EventsLog         = Join-Path $LogsDir "events.jsonl"
$LogChainFile      = Join-Path $LogsDir "logchain.state"
$IntegrityManifest = Join-Path $ConfigsDir "integrity.json"
$WatchdogLoopName  = "SwarmnetWatchdogLoop"
$GlobalMutexName   = "Global\\WOD_SwarmnetWatchdogMutex"

# Ensure directories
foreach ($d in @($LogsDir,$HostAuditDir,$AgentsAuditDir,$TasksDir)) { if (-not (Test-Path $d)) { New-Item -ItemType Directory -Path $d | Out-Null } }

# Deterministic seed per session unless overridden
if (-not $env:$SeedEnvName) { $env:$SeedEnvName = $DefaultSeed; Write-Host ">>> Injected $SeedEnvName=$($env:$SeedEnvName)" } else { Write-Host ">>> Using existing $SeedEnvName=$($env:$SeedEnvName)" }

# ------------------------------------------------------------
# SECURE LOGGING & TELEMETRY
# ------------------------------------------------------------
function Get-FileSha256([string]$Path) {
  if (-not (Test-Path $Path)) { return "" }
  (Get-FileHash -Algorithm SHA256 -Path $Path).Hash.ToLower()
}

function Get-HmacSha256([string]$Text, [string]$Key) {
  if (-not $Key) { return "" }
  $bytes = [System.Text.Encoding]::UTF8.GetBytes($Text)
  $kbytes = [System.Text.Encoding]::UTF8.GetBytes($Key)
  $hmac = New-Object System.Security.Cryptography.HMACSHA256($kbytes)
  ($hmac.ComputeHash($bytes) | ForEach-Object { $_.ToString("x2") }) -join ""
}

function Write-LogChain([string]$Message, [string]$Category="info") {
  $prevLine = if (Test-Path $LogChainFile) { Get-Content $LogChainFile -ErrorAction SilentlyContinue | Select-Object -Last 1 } else { "" }
  $prevHash = if ($prevLine) { (Get-FileHash -Algorithm SHA256 -InputStream ([System.IO.MemoryStream]::new([System.Text.Encoding]::UTF8.GetBytes($prevLine)))).Hash.ToLower() } else { "" }

  $entryObj = @{
    ts       = (Get-Date).ToString("o")
    category = $Category
    msg      = $Message
    prevHash = $prevHash
    seed     = $env:$SeedEnvName
    host     = $env:COMPUTERNAME
    user     = $env:USERNAME
  }
  $entry = $entryObj | ConvertTo-Json -Compress
  $entry | Out-File -Append -Encoding utf8 $EventsLog
  $entry | Out-File $LogChainFile -Encoding utf8
}

function Send-Telemetry([string]$EventType, [hashtable]$Data) {
  $recordObj = @{
    ts   = (Get-Date).ToString("o")
    type = $EventType
    seed = $env:$SeedEnvName
    host = $env:COMPUTERNAME
    user = $env:USERNAME
    data = $Data
  }
  $record = $recordObj | ConvertTo-Json -Compress
  $record | Out-File -Append -Encoding utf8 $EventsLog
  if ($TelemetryEndpoint -and $TelemetryKey) {
    try {
      Invoke-RestMethod -Method Post -Uri $TelemetryEndpoint -Headers @{ Authorization = "Bearer $TelemetryKey"; "Content-Type" = "application/json" } -Body $record | Out-Null
    } catch { Write-LogChain "Telemetry POST failed: $($_.Exception.Message)" "warn" }
  }
}

# ------------------------------------------------------------
# INTEGRITY & POLICY VALIDATION
# ------------------------------------------------------------
function Assert-BinaryAndConfigs {
  $ok = $true
  if (-not (Test-Path $SwarmnetExe)) { Write-Host "ERROR: $SwarmnetExe missing." -ForegroundColor Red; Write-LogChain "Missing swarmnet.exe" "error"; $ok = $false }
  $cfgs = @("merchantSystem.ing","directorAI.ing","virtualDesktop.ing","operators.ing") | ForEach-Object { Join-Path $ConfigsDir $_ }
  foreach ($c in $cfgs) { if (-not (Test-Path $c)) { Write-Host "ERROR: Missing config: $c" -ForegroundColor Red; Write-LogChain "Missing config: $c" "error"; $ok = $false } }
  if (-not $ok) { return $false }

  # Verify integrity manifest (optional). Requires SHA256 and optional HMAC for tamper-evidence.
  if (Test-Path $IntegrityManifest) {
    try {
      $text = Get-Content $IntegrityManifest -Raw
      $manifest = $text | ConvertFrom-Json
      foreach ($item in $manifest.configs) {
        $path = Join-Path $ConfigsDir $item.name
        $sha  = Get-FileSha256 $path
        if ($sha -ne $item.sha256.ToLower()) { Write-Host "ERROR: Integrity mismatch for $($item.name)" -ForegroundColor Red; Write-LogChain "Integrity mismatch: $($item.name)" "error"; return $false }
      }
      if ($manifest.hmac) {
        $calc = Get-HmacSha256 ($manifest.configs | ConvertTo-Json -Compress) $IntegrityKey
        if ($calc -ne $manifest.hmac.ToLower()) { Write-Host "ERROR: HMAC mismatch." -ForegroundColor Red; Write-LogChain "Integrity HMAC mismatch" "error"; return $false }
      }
      Write-LogChain "Integrity checks passed" "info"
    } catch { Write-LogChain "Integrity manifest error: $($_.Exception.Message)" "warn" }
  }

  # Policy markers (advisory)
  $policyChecks = @(
    @{ file="directorAI.ing";   pattern="denyFirst" },
    @{ file="virtualDesktop.ing"; pattern="pcOnly" }
  )
  foreach ($p in $policyChecks) {
    $f = Join-Path $ConfigsDir $p.file
    if (Test-Path $f) {
      $content = Get-Content $f -Raw
      if ($content -notmatch [Regex]::Escape($p.pattern)) { Write-LogChain "Policy marker missing in $($p.file): $($p.pattern)" "warn" }
    }
  }
  return $true
}

function Test-HostHealth([string]$Url = $HostUrl) {
  try { $resp = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 2; return $resp.StatusCode -ge 200 -and $resp.StatusCode -lt 400 }
  catch { return $false }
}

# ------------------------------------------------------------
# ACTIONS
# ------------------------------------------------------------
function Start-Host {
  if (-not (Assert-BinaryAndConfigs)) { return }
  Write-Host ">>> Starting Swarmnet Host..."
  Send-Telemetry "host_start" @{ hostUrl = $HostUrl }
  & $SwarmnetExe host `
    --config (Join-Path $ConfigsDir "merchantSystem.ing") `
    --config (Join-Path $ConfigsDir "directorAI.ing") `
    --config (Join-Path $ConfigsDir "virtualDesktop.ing") `
    --config (Join-Path $ConfigsDir "operators.ing") `
    --seedStrategy run-scoped `
    --audit $HostAuditDir
  Write-LogChain "Host started" "info"
}

function Start-Agent([Parameter(Mandatory=$true)][string]$UserId) {
  if (-not (Assert-BinaryAndConfigs)) { return }
  $Workspace = "$WorkspacePrefix$UserId"
  $UserAudit = Join-Path $AgentsAuditDir $UserId
  if (-not (Test-Path $UserAudit)) { New-Item -ItemType Directory -Path $UserAudit | Out-Null }
  Write-Host ">>> Starting Agent for $UserId ($Workspace)..."
  Send-Telemetry "agent_start" @{ user = $UserId; workspace = $Workspace }
  & $SwarmnetExe agent `
    --user $UserId `
    --workspace $Workspace `
    --connect $HostUrl `
    --audit $UserAudit
  Write-LogChain "Agent started: $UserId" "info"
}

function Attach-Host {
  if (-not (Test-HostHealth)) { Write-Host "WARN: Host not healthy at $HostUrl" -ForegroundColor Yellow; Write-LogChain "Attach: host unhealthy" "warn" }
  Write-Host ">>> Attaching to Host..."
  Send-Telemetry "attach" @{ hostUrl = $HostUrl }
  & $SwarmnetExe attach --connect $HostUrl
}

function Generate-VSCodeTasks {
  if (-not (Test-Path $TasksDir)) { New-Item -ItemType Directory -Path $TasksDir | Out-Null }
  $scriptName = "swarmnet.magic"
  $runner = "powershell"
  $tasks = @{
    version = "2.0.0"
    tasks   = @(
      @{ label="Swarmnet: Start Host"; type="shell"; command=$runner; args=@("-File",$scriptName,"host"); group="build" }
    )
  }
  for ($i=1; $i -le 8; $i++) {
    $user = "user{0:D2}" -f $i
    $tasks.tasks += @{ label="Swarmnet: Start Agent $user"; type="shell"; command=$runner; args=@("-File",$scriptName,"agent","-User",$user); group="build" }
  }
  $tasks.tasks += @{ label="Swarmnet: Attach Host"; type="shell"; command=$runner; args=@("-File",$scriptName,"attach"); group="build" }
  $json = $tasks | ConvertTo-Json -Depth 5
  $outFile = Join-Path $TasksDir "tasks.json"
  $json | Out-File $outFile -Encoding utf8
  Write-Host ">>> VS Code tasks.json generated: $outFile"
  Write-LogChain "VS Code tasks generated" "info"
}

# ------------------------------------------------------------
# WATCHDOG (user-mode, hardened)
# ------------------------------------------------------------
function Start-Watchdog {
  if (Get-Job -Name $WatchdogLoopName -ErrorAction SilentlyContinue) { Write-Host ">>> Watchdog already running."; return }
  try {
    $mutex = New-Object System.Threading.Mutex($false, $GlobalMutexName)
    if (-not $mutex.WaitOne(0, $false)) { Write-Host ">>> Mutex held by another watchdog. Not starting."; return }
  } catch { Write-LogChain "Mutex error: $($_.Exception.Message)" "warn" }

  Write-Host ">>> Starting watchdog ($WatchdogLoopName)..."
  Start-Job -Name $WatchdogLoopName -ScriptBlock {
    param($RepoRoot,$SwarmnetExe,$ConfigsDir,$HostAuditDir,$GlobalMutexName)
    $mutex = New-Object System.Threading.Mutex($false, $GlobalMutexName)
    Set-Location $RepoRoot
    while ($true) {
      try {
        $proc = Get-Process -Name "swarmnet" -ErrorAction SilentlyContinue
        if (-not $proc) {
          "[{0}] Host absent. Starting..." -f (Get-Date).ToString("s") | Out-File ".\logs\watchdog.log" -Append -Encoding utf8
          & $SwarmnetExe host `
            --config (Join-Path $ConfigsDir "merchantSystem.ing") `
            --config (Join-Path $ConfigsDir "directorAI.ing") `
            --config (Join-Path $ConfigsDir "virtualDesktop.ing") `
            --config (Join-Path $ConfigsDir "operators.ing") `
            --seedStrategy run-scoped `
            --audit $HostAuditDir
        } else {
          "[{0}] Host running." -f (Get-Date).ToString("s") | Out-File ".\logs\watchdog.log" -Append -Encoding utf8
        }
      } catch {
        "[{0}] Error: {1}" -f (Get-Date).ToString("s"), $_.Exception.Message | Out-File ".\logs\watchdog.log" -Append -Encoding utf8
      }
      Start-Sleep -Seconds 120
    }
  } -ArgumentList $RepoRoot,$SwarmnetExe,$ConfigsDir,$HostAuditDir,$GlobalMutexName | Out-Null
  Write-LogChain "Watchdog started" "info"
}

function Stop-Watchdog {
  $job = Get-Job -Name $WatchdogLoopName -ErrorAction SilentlyContinue
  if ($job) { Stop-Job $job -Force; Remove-Job $job; Write-Host ">>> Watchdog stopped."; Write-LogChain "Watchdog stopped" "info" } else { Write-Host ">>> No watchdog job found." }
}

# ------------------------------------------------------------
# ADMIN-MODE OPTIONALS (signed task & AppLocker/Intune advisory)
# ------------------------------------------------------------
function Is-Admin { ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator") }

function Register-SignedTask {
  param([string]$TaskName = "SwarmnetHostSigned", [string]$ScriptPath = (Join-Path $RepoRoot "swarmnet.magic"), [int]$IntervalMinutes = 2)
  if (-not (Is-Admin)) { Write-Host "ERROR: Admin required." -ForegroundColor Red; return }
  $sig = Get-AuthenticodeSignature -FilePath $ScriptPath
  if ($sig.Status -ne "Valid") { Write-Host "ERROR: Script not signed or invalid." -ForegroundColor Red; Write-LogChain "Signature invalid for scheduled task" "error"; return }
  $ActionArgs = "-NoProfile -WindowStyle Hidden -ExecutionPolicy AllSigned -File `"$ScriptPath`" host"
  $Action     = New-ScheduledTaskAction -Execute "powershell.exe" -Argument $ActionArgs
  $Trigger    = New-ScheduledTaskTrigger -Once -At (Get-Date).AddMinutes(1) -RepetitionInterval (New-TimeSpan -Minutes $IntervalMinutes) -RepetitionDuration ([TimeSpan]::MaxValue)
  $Settings   = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
  $Principal  = New-ScheduledTaskPrincipal -UserId "SYSTEM" -RunLevel Highest
  Register-ScheduledTask -TaskName $TaskName -Action $Action -Trigger $Trigger -Settings $Settings -Principal $Principal -Force | Out-Null
  Write-LogChain "Signed scheduled task registered: $TaskName" "info"
  Write-Host ">>> Signed scheduled task registered."
}

function AppLockerIntuneGuidance {
  Write-Host "AppLocker/Intune: Allow only signed swarmnet.exe via publisher or hash rules. Deploy via Intune Endpoint Protection -> AppLocker. (Admin required to enforce.)"
  Write-LogChain "AppLocker/Intune guidance emitted" "info"
}

# ------------------------------------------------------------
# DISPATCH
# ------------------------------------------------------------
switch ($Action) {
  "host"             { Start-Host }
  "agent"            { if ($User) { Start-Agent -UserId $User } else { Write-Host "Please specify -User (e.g., user03)" } }
  "attach"           { Attach-Host }
  "tasks"            { Generate-VSCodeTasks }
  "watchdog"         { Start-Watchdog }
  "watchdog:stop"    { Stop-Watchdog }
  "task:register"    { Register-SignedTask }     # Admin optional
  "applocker:intune" { AppLockerIntuneGuidance } # Advisory
  default {
    Write-Host "Usage:"
    Write-Host "  powershell -File .\swarmnet.magic host"
    Write-Host "  powershell -File .\swarmnet.magic agent -User user03"
    Write-Host "  powershell -File .\swarmnet.magic attach"
    Write-Host "  powershell -File .\swarmnet.magic tasks"
    Write-Host "  powershell -File .\swarmnet.magic watchdog          # user-mode"
    Write-Host "  powershell -File .\swarmnet.magic watchdog:stop     # stop loop"
    Write-Host "  powershell -File .\swarmnet.magic task:register     # admin; signed scheduled task"
    Write-Host "  powershell -File .\swarmnet.magic applocker:intune  # guidance"
  }
}
